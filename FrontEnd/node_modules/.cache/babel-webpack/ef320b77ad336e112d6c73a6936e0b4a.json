{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Anime } from './models/anime';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../core/auth/services/auth.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    Authorization: localStorage.getItem('access_token')\n  })\n};\nexport class ApiService {\n  constructor(http, authService, handler) {\n    this.http = http;\n    this.authService = authService;\n    this.user_id = JSON.parse(localStorage.getItem(\"user\")).id;\n    this.token = this.authService.getToken();\n    this.url = \"https://api.jikan.moe/v3/anime/20\";\n    this.http = new HttpClient(handler);\n  }\n\n  setAnimeId(name) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const reqUrl = \"https://api.jikan.moe/v3/search/anime?q=\" + name + \"&page=1&limit=1\";\n      const response = yield (yield fetch(reqUrl)).json();\n      _this.anime_id = yield response.results[0].mal_id;\n      console.log(_this.anime_id);\n    })();\n  }\n\n  getUserAnime(name) {\n    this.setAnimeId(name);\n    return this.http.get(this.url).pipe(map(response => {\n      let anime = new Anime(response.mal_id, response.title, response.rating, response.score, response.synopsis, response.image_url, response.themes);\n    })).subscribe(res => {\n      return res;\n    });\n  }\n\n  handleError(error) {\n    if (error.status === 0) {\n      //Client-side or network\n      console.error('An error occurred:', error.error);\n    } else {\n      //Back-end\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n\n    return throwError('Something bad happened; please try again later.');\n  }\n\n}\n\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i1.HttpBackend));\n};\n\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/FrontEnd/src/app/shared/api.service.ts"],"names":["HttpClient","HttpHeaders","throwError","map","Anime","i0","i1","i2","httpOptions","headers","Authorization","localStorage","getItem","ApiService","constructor","http","authService","handler","user_id","JSON","parse","id","token","getToken","url","setAnimeId","name","reqUrl","response","fetch","json","anime_id","results","mal_id","console","log","getUserAnime","get","pipe","anime","title","rating","score","synopsis","image_url","themes","subscribe","res","handleError","error","status","ɵfac","ApiService_Factory","t","ɵɵinject","AuthService","HttpBackend","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { throwError } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Anime } from './models/anime';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../core/auth/services/auth.service\";\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        Authorization: localStorage.getItem('access_token')\r\n    })\r\n};\r\nexport class ApiService {\r\n    constructor(http, authService, handler) {\r\n        this.http = http;\r\n        this.authService = authService;\r\n        this.user_id = JSON.parse(localStorage.getItem(\"user\")).id;\r\n        this.token = this.authService.getToken();\r\n        this.url = \"https://api.jikan.moe/v3/anime/20\";\r\n        this.http = new HttpClient(handler);\r\n    }\r\n    async setAnimeId(name) {\r\n        const reqUrl = \"https://api.jikan.moe/v3/search/anime?q=\" + name + \"&page=1&limit=1\";\r\n        const response = await (await fetch(reqUrl)).json();\r\n        this.anime_id = await response.results[0].mal_id;\r\n        console.log(this.anime_id);\r\n    }\r\n    getUserAnime(name) {\r\n        this.setAnimeId(name);\r\n        return this.http.get(this.url).pipe(map((response) => {\r\n            let anime = new Anime(response.mal_id, response.title, response.rating, response.score, response.synopsis, response.image_url, response.themes);\r\n        })).subscribe(res => {\r\n            return res;\r\n        });\r\n    }\r\n    handleError(error) {\r\n        if (error.status === 0) {\r\n            //Client-side or network\r\n            console.error('An error occurred:', error.error);\r\n        }\r\n        else {\r\n            //Back-end\r\n            console.error(`Backend returned code ${error.status}, body was: `, error.error);\r\n        }\r\n        return throwError('Something bad happened; please try again later.');\r\n    }\r\n}\r\nApiService.ɵfac = function ApiService_Factory(t) { return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i1.HttpBackend)); };\r\nApiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ApiService, factory: ApiService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}