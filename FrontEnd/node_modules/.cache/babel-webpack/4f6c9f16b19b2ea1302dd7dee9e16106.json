{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { UserAnime } from '../core/auth/models/user-anime';\nimport { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../core/auth/services/auth.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    Authorization: localStorage.getItem('access_token'),\n    'access-control-allow-origin': \"http://localhost:4200/\"\n  })\n};\nexport class ApiService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.user_id = JSON.parse(localStorage.getItem(\"user\")).id;\n    this.token = this.authService.getToken();\n    this.url = \"https://api.jikan.moe/v3/anime/\";\n  }\n\n  setAnimeId(name) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const reqUrl = \"https://api.jikan.moe/v3/search/anime?q=\" + name + \"&page=1&limit=1\";\n      const response = yield (yield fetch(reqUrl)).json();\n      _this.anime_id = response.results[0].mal_id;\n      console.log(_this.anime_id);\n    })();\n  }\n\n  addUserAnime(name) {\n    this.setAnimeId(name);\n    let uAInfo = {\n      \"user\": {\n        \"id\": 61\n      },\n      \"anime\": {\n        \"id\": this.anime_id\n      }\n    };\n    let userAnime = new UserAnime();\n    userAnime = uAInfo;\n    console.log(userAnime);\n    return this.http.post(\"http://localhost:8090/anilib/library\", userAnime, httpOptions).pipe(retry(3), catchError(this.handleError));\n  }\n\n  handleError(error) {\n    if (error.status === 0) {\n      //Client-side or network\n      console.error('An error occurred:', error.error);\n    } else {\n      //Back-end\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n\n    return throwError('Something bad happened; please try again later.');\n  }\n\n}\n\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\n\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/FrontEnd/src/app/shared/api.service.ts"],"names":["HttpHeaders","UserAnime","throwError","catchError","retry","i0","i1","i2","httpOptions","headers","Authorization","localStorage","getItem","ApiService","constructor","http","authService","user_id","JSON","parse","id","token","getToken","url","setAnimeId","name","reqUrl","response","fetch","json","anime_id","results","mal_id","console","log","addUserAnime","uAInfo","userAnime","post","pipe","handleError","error","status","ɵfac","ApiService_Factory","t","ɵɵinject","HttpClient","AuthService","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport { UserAnime } from '../core/auth/models/user-anime';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../core/auth/services/auth.service\";\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        Authorization: localStorage.getItem('access_token'),\r\n        'access-control-allow-origin': \"http://localhost:4200/\",\r\n    })\r\n};\r\nexport class ApiService {\r\n    constructor(http, authService) {\r\n        this.http = http;\r\n        this.authService = authService;\r\n        this.user_id = JSON.parse(localStorage.getItem(\"user\")).id;\r\n        this.token = this.authService.getToken();\r\n        this.url = \"https://api.jikan.moe/v3/anime/\";\r\n    }\r\n    async setAnimeId(name) {\r\n        const reqUrl = \"https://api.jikan.moe/v3/search/anime?q=\" + name + \"&page=1&limit=1\";\r\n        const response = await (await fetch(reqUrl)).json();\r\n        this.anime_id = response.results[0].mal_id;\r\n        console.log(this.anime_id);\r\n    }\r\n    addUserAnime(name) {\r\n        this.setAnimeId(name);\r\n        let uAInfo = {\r\n            \"user\": { \"id\": 61 },\r\n            \"anime\": { \"id\": this.anime_id }\r\n        };\r\n        let userAnime = new UserAnime;\r\n        userAnime = uAInfo;\r\n        console.log(userAnime);\r\n        return this.http.post(\"http://localhost:8090/anilib/library\", userAnime, httpOptions)\r\n            .pipe(retry(3), catchError(this.handleError));\r\n    }\r\n    handleError(error) {\r\n        if (error.status === 0) {\r\n            //Client-side or network\r\n            console.error('An error occurred:', error.error);\r\n        }\r\n        else {\r\n            //Back-end\r\n            console.error(`Backend returned code ${error.status}, body was: `, error.error);\r\n        }\r\n        return throwError('Something bad happened; please try again later.');\r\n    }\r\n}\r\nApiService.ɵfac = function ApiService_Factory(t) { return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService)); };\r\nApiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ApiService, factory: ApiService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}