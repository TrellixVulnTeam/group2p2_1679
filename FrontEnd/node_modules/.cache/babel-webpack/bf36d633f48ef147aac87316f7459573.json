{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    Authorization: 'my-auth-token'\n  })\n};\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.url = \"http://localhost:8090/anilib/\";\n  }\n\n  register(user) {\n    return this.http.post(this.url + \"register\", user).pipe(catchError(this.handleError));\n  }\n\n  login(credentials) {\n    var _this = this;\n\n    this.http.post(this.url + \"login\", credentials).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (res) {\n        _this.setToken(res.token);\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  setToken(token) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      localStorage.setItem(_this2.tokenKey, token);\n    })();\n  }\n\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  get IsLoggedIn() {\n    let authToken = localStorage.getItem(this.tokenKey);\n    console.log(authToken);\n    return authToken !== null && authToken != 'undefined';\n  }\n\n  logout() {\n    localStorage.clear();\n    this.router.navigate(['login']);\n  }\n\n  handleError(error) {\n    let msg = '';\n\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      msg = error.error.message;\n    } else {\n      // Server-side error\n      msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n\n    return throwError(msg);\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/FrontEnd/src/app/core/auth/services/auth.service.ts"],"names":["HttpHeaders","throwError","catchError","i0","i1","i2","httpOptions","headers","Authorization","AuthService","constructor","http","router","url","register","user","post","pipe","handleError","login","credentials","subscribe","res","setToken","token","localStorage","setItem","tokenKey","getToken","getItem","IsLoggedIn","authToken","console","log","logout","clear","navigate","error","msg","ErrorEvent","message","status","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"@angular/router\";\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'my-auth-token'\r\n    })\r\n};\r\nexport class AuthService {\r\n    constructor(http, router) {\r\n        this.http = http;\r\n        this.router = router;\r\n        this.url = \"http://localhost:8090/anilib/\";\r\n    }\r\n    register(user) {\r\n        return this.http.post(this.url + \"register\", user)\r\n            .pipe(catchError(this.handleError));\r\n    }\r\n    login(credentials) {\r\n        this.http.post(this.url + \"login\", credentials)\r\n            .subscribe(async (res) => {\r\n            this.setToken(res.token);\r\n        });\r\n    }\r\n    async setToken(token) {\r\n        localStorage.setItem(this.tokenKey, token);\r\n    }\r\n    getToken() {\r\n        return localStorage.getItem(this.tokenKey);\r\n    }\r\n    get IsLoggedIn() {\r\n        let authToken = localStorage.getItem(this.tokenKey);\r\n        console.log(authToken);\r\n        return authToken !== null && authToken != 'undefined';\r\n    }\r\n    logout() {\r\n        localStorage.clear();\r\n        this.router.navigate(['login']);\r\n    }\r\n    handleError(error) {\r\n        let msg = '';\r\n        if (error.error instanceof ErrorEvent) {\r\n            // Client-side error\r\n            msg = error.error.message;\r\n        }\r\n        else {\r\n            // Server-side error\r\n            msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n        }\r\n        return throwError(msg);\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}