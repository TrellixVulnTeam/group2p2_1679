{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../core/auth/services/auth.service\";\nexport class ApiService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.user_id = JSON.parse(localStorage.getItem(\"user\")).id;\n    this.token = this.authService.getToken();\n    this.url = \"https://api.jikan.moe/v3/anime/\";\n  }\n\n  setAnimeId(name) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield (yield fetch(\"https://api.jikan.moe/v3/search/anime?q=\" + name + \"&page=1?page=1&limit=1\")).json();\n      _this.anime_id = response.results[0].mal_id;\n    })();\n  }\n\n  addUserAnime(name) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.setAnimeId(name);\n      let userAnime = {\n        user: {\n          id: _this2.user_id\n        },\n        anime: {\n          id: _this2.anime_id\n        }\n      };\n      fetch(\"http://localhost:8090/anilib/library\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: _this2.token\n        },\n        body: JSON.stringify(userAnime)\n      }).then(response => response.json()).then(data => {\n        console.log('Success', data);\n      }).catch(error => {\n        console.error('Unable to post userAnime', error);\n      });\n    })();\n  }\n\n}\n\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\n\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/frontend/src/app/shared/api.service.ts"],"names":["i0","i1","i2","ApiService","constructor","http","authService","user_id","JSON","parse","localStorage","getItem","id","token","getToken","url","setAnimeId","name","response","fetch","json","anime_id","results","mal_id","addUserAnime","userAnime","user","anime","method","headers","Authorization","body","stringify","then","data","console","log","catch","error","ɵfac","ApiService_Factory","t","ɵɵinject","HttpClient","AuthService","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,oCAApB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoB;AAC3B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,OAAL,GAAeC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC,EAAxD;AACA,SAAKC,KAAL,GAAa,KAAKP,WAAL,CAAiBQ,QAAjB,EAAb;AACA,SAAKC,GAAL,GAAW,iCAAX;AACH;;AACKC,EAAAA,UAAU,CAACC,IAAD,EAAO;AAAA;;AAAA;AACnB,YAAMC,QAAQ,SAAS,OAAOC,KAAK,CAAC,6CAA6CF,IAA7C,GAAoD,wBAArD,CAAZ,EAA4FG,IAA5F,EAAvB;AACA,MAAA,KAAI,CAACC,QAAL,GAAgBH,QAAQ,CAACI,OAAT,CAAiB,CAAjB,EAAoBC,MAApC;AAFmB;AAGtB;;AACKC,EAAAA,YAAY,CAACP,IAAD,EAAO;AAAA;;AAAA;AACrB,YAAM,MAAI,CAACD,UAAL,CAAgBC,IAAhB,CAAN;AACA,UAAIQ,SAAS,GAAG;AACZC,QAAAA,IAAI,EAAE;AAAEd,UAAAA,EAAE,EAAE,MAAI,CAACL;AAAX,SADM;AAEZoB,QAAAA,KAAK,EAAE;AAAEf,UAAAA,EAAE,EAAE,MAAI,CAACS;AAAX;AAFK,OAAhB;AAIAF,MAAAA,KAAK,CAAC,sCAAD,EAAyC;AAC1CS,QAAAA,MAAM,EAAE,MADkC;AAE1CC,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAELC,UAAAA,aAAa,EAAE,MAAI,CAACjB;AAFf,SAFiC;AAM1CkB,QAAAA,IAAI,EAAEvB,IAAI,CAACwB,SAAL,CAAeP,SAAf;AANoC,OAAzC,CAAL,CAQKQ,IARL,CAQUf,QAAQ,IAAIA,QAAQ,CAACE,IAAT,EARtB,EASKa,IATL,CASUC,IAAI,IAAI;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,IAAvB;AACH,OAXD,EAYKG,KAZL,CAYYC,KAAD,IAAW;AAClBH,QAAAA,OAAO,CAACG,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACH,OAdD;AANqB;AAqBxB;;AAjCmB;;AAmCxBnC,UAAU,CAACoC,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAItC,UAAV,EAAsBH,EAAE,CAAC0C,QAAH,CAAYzC,EAAE,CAAC0C,UAAf,CAAtB,EAAkD3C,EAAE,CAAC0C,QAAH,CAAYxC,EAAE,CAAC0C,WAAf,CAAlD,CAAP;AAAwF,CAA3I;;AACAzC,UAAU,CAAC0C,KAAX,GAAmB,aAAc7C,EAAE,CAAC8C,kBAAH,CAAsB;AAAEjC,EAAAA,KAAK,EAAEV,UAAT;AAAqB4C,EAAAA,OAAO,EAAE5C,UAAU,CAACoC,IAAzC;AAA+CS,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../core/auth/services/auth.service\";\r\nexport class ApiService {\r\n    constructor(http, authService) {\r\n        this.http = http;\r\n        this.authService = authService;\r\n        this.user_id = JSON.parse(localStorage.getItem(\"user\")).id;\r\n        this.token = this.authService.getToken();\r\n        this.url = \"https://api.jikan.moe/v3/anime/\";\r\n    }\r\n    async setAnimeId(name) {\r\n        const response = await (await fetch(\"https://api.jikan.moe/v3/search/anime?q=\" + name + \"&page=1?page=1&limit=1\")).json();\r\n        this.anime_id = response.results[0].mal_id;\r\n    }\r\n    async addUserAnime(name) {\r\n        await this.setAnimeId(name);\r\n        let userAnime = {\r\n            user: { id: this.user_id },\r\n            anime: { id: this.anime_id }\r\n        };\r\n        fetch(\"http://localhost:8090/anilib/library\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: this.token\r\n            },\r\n            body: JSON.stringify(userAnime)\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n            console.log('Success', data);\r\n        })\r\n            .catch((error) => {\r\n            console.error('Unable to post userAnime', error);\r\n        });\r\n    }\r\n}\r\nApiService.ɵfac = function ApiService_Factory(t) { return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService)); };\r\nApiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ApiService, factory: ApiService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}