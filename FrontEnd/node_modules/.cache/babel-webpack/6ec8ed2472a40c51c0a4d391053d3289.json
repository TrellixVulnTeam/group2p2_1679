{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst EventEmitter = require(\"eventemitter3\");\n\nconst p_timeout_1 = require(\"p-timeout\");\n\nconst priority_queue_1 = require(\"./priority-queue\");\n\nconst empty = () => {};\n\nconst timeoutError = new p_timeout_1.default.TimeoutError();\n/**\nPromise queue with concurrency control.\n*/\n\nclass PQueue extends EventEmitter {\n  constructor(options) {\n    super();\n    this._intervalCount = 0;\n    this._intervalEnd = 0;\n    this._pendingCount = 0;\n    this._resolveEmpty = empty;\n    this._resolveIdle = empty; // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion\n\n    options = Object.assign({\n      carryoverConcurrencyCount: false,\n      intervalCap: Infinity,\n      interval: 0,\n      concurrency: Infinity,\n      autoStart: true,\n      queueClass: priority_queue_1.default\n    }, options);\n\n    if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {\n      throw new TypeError(`Expected \\`intervalCap\\` to be a number from 1 and up, got \\`${options.intervalCap}\\` (${typeof options.intervalCap})`);\n    }\n\n    if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {\n      throw new TypeError(`Expected \\`interval\\` to be a finite number >= 0, got \\`${options.interval}\\` (${typeof options.interval})`);\n    }\n\n    this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;\n    this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;\n    this._intervalCap = options.intervalCap;\n    this._interval = options.interval;\n    this._queue = new options.queueClass();\n    this._queueClass = options.queueClass;\n    this.concurrency = options.concurrency;\n    this._timeout = options.timeout;\n    this._throwOnTimeout = options.throwOnTimeout === true;\n    this._isPaused = options.autoStart === false;\n  }\n\n  get _doesIntervalAllowAnother() {\n    return this._isIntervalIgnored || this._intervalCount < this._intervalCap;\n  }\n\n  get _doesConcurrentAllowAnother() {\n    return this._pendingCount < this._concurrency;\n  }\n\n  _next() {\n    this._pendingCount--;\n\n    this._tryToStartAnother();\n  }\n\n  _resolvePromises() {\n    this._resolveEmpty();\n\n    this._resolveEmpty = empty;\n\n    if (this._pendingCount === 0) {\n      this._resolveIdle();\n\n      this._resolveIdle = empty;\n    }\n  }\n\n  _onResumeInterval() {\n    this._onInterval();\n\n    this._initializeIntervalIfNeeded();\n\n    this._timeoutId = undefined;\n  }\n\n  _isIntervalPaused() {\n    const now = Date.now();\n\n    if (this._intervalId === undefined) {\n      const delay = this._intervalEnd - now;\n\n      if (delay < 0) {\n        // Act as the interval was done\n        // We don't need to resume it here because it will be resumed on line 160\n        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;\n      } else {\n        // Act as the interval is pending\n        if (this._timeoutId === undefined) {\n          this._timeoutId = setTimeout(() => {\n            this._onResumeInterval();\n          }, delay);\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _tryToStartAnother() {\n    if (this._queue.size === 0) {\n      // We can clear the interval (\"pause\")\n      // Because we can redo it later (\"resume\")\n      if (this._intervalId) {\n        clearInterval(this._intervalId);\n      }\n\n      this._intervalId = undefined;\n\n      this._resolvePromises();\n\n      return false;\n    }\n\n    if (!this._isPaused) {\n      const canInitializeInterval = !this._isIntervalPaused();\n\n      if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {\n        this.emit('active');\n\n        this._queue.dequeue()();\n\n        if (canInitializeInterval) {\n          this._initializeIntervalIfNeeded();\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _initializeIntervalIfNeeded() {\n    if (this._isIntervalIgnored || this._intervalId !== undefined) {\n      return;\n    }\n\n    this._intervalId = setInterval(() => {\n      this._onInterval();\n    }, this._interval);\n    this._intervalEnd = Date.now() + this._interval;\n  }\n\n  _onInterval() {\n    if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {\n      clearInterval(this._intervalId);\n      this._intervalId = undefined;\n    }\n\n    this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;\n\n    this._processQueue();\n  }\n  /**\n  Executes all queued functions until it reaches the limit.\n  */\n\n\n  _processQueue() {\n    // eslint-disable-next-line no-empty\n    while (this._tryToStartAnother()) {}\n  }\n\n  get concurrency() {\n    return this._concurrency;\n  }\n\n  set concurrency(newConcurrency) {\n    if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {\n      throw new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${newConcurrency}\\` (${typeof newConcurrency})`);\n    }\n\n    this._concurrency = newConcurrency;\n\n    this._processQueue();\n  }\n  /**\n  Adds a sync or async task to the queue. Always returns a promise.\n  */\n\n\n  add(fn, options = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        const run = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* () {\n            _this._pendingCount++;\n            _this._intervalCount++;\n\n            try {\n              const operation = _this._timeout === undefined && options.timeout === undefined ? fn() : p_timeout_1.default(Promise.resolve(fn()), options.timeout === undefined ? _this._timeout : options.timeout, () => {\n                if (options.throwOnTimeout === undefined ? _this._throwOnTimeout : options.throwOnTimout) {\n                  reject(timeoutError);\n                }\n\n                return undefined;\n              });\n              resolve(yield operation);\n            } catch (error) {\n              reject(error);\n            }\n\n            _this._next();\n          });\n\n          return function run() {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        _this._queue.enqueue(run, options);\n\n        _this._tryToStartAnother();\n      });\n    })();\n  }\n  /**\n  Same as `.add()`, but accepts an array of sync or async functions.\n   @returns A promise that resolves when all functions are resolved.\n  */\n\n\n  addAll(functions, options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return Promise.all(functions.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (function_) {\n          return _this2.add(function_, options);\n        });\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n  /**\n  Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)\n  */\n\n\n  start() {\n    if (!this._isPaused) {\n      return this;\n    }\n\n    this._isPaused = false;\n\n    this._processQueue();\n\n    return this;\n  }\n  /**\n  Put queue execution on hold.\n  */\n\n\n  pause() {\n    this._isPaused = true;\n  }\n  /**\n  Clear the queue.\n  */\n\n\n  clear() {\n    this._queue = new this._queueClass();\n  }\n  /**\n  Can be called multiple times. Useful if you for example add additional items at a later time.\n   @returns A promise that settles when the queue becomes empty.\n  */\n\n\n  onEmpty() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // Instantly resolve if the queue is empty\n      if (_this3._queue.size === 0) {\n        return;\n      }\n\n      return new Promise(resolve => {\n        const existingResolve = _this3._resolveEmpty;\n\n        _this3._resolveEmpty = () => {\n          existingResolve();\n          resolve();\n        };\n      });\n    })();\n  }\n  /**\n  The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.\n   @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.\n  */\n\n\n  onIdle() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // Instantly resolve if none pending and if nothing else is queued\n      if (_this4._pendingCount === 0 && _this4._queue.size === 0) {\n        return;\n      }\n\n      return new Promise(resolve => {\n        const existingResolve = _this4._resolveIdle;\n\n        _this4._resolveIdle = () => {\n          existingResolve();\n          resolve();\n        };\n      });\n    })();\n  }\n  /**\n  Size of the queue.\n  */\n\n\n  get size() {\n    return this._queue.size;\n  }\n  /**\n  Number of pending promises.\n  */\n\n\n  get pending() {\n    return this._pendingCount;\n  }\n  /**\n  Whether the queue is currently paused.\n  */\n\n\n  get isPaused() {\n    return this._isPaused;\n  }\n  /**\n  Set the timeout for future operations.\n  */\n\n\n  set timeout(milliseconds) {\n    this._timeout = milliseconds;\n  }\n\n  get timeout() {\n    return this._timeout;\n  }\n\n}\n\nexports.default = PQueue;","map":{"version":3,"sources":["C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/frontend/node_modules/p-queue/dist/index.js"],"names":["Object","defineProperty","exports","value","EventEmitter","require","p_timeout_1","priority_queue_1","empty","timeoutError","default","TimeoutError","PQueue","constructor","options","_intervalCount","_intervalEnd","_pendingCount","_resolveEmpty","_resolveIdle","assign","carryoverConcurrencyCount","intervalCap","Infinity","interval","concurrency","autoStart","queueClass","TypeError","undefined","Number","isFinite","_carryoverConcurrencyCount","_isIntervalIgnored","_intervalCap","_interval","_queue","_queueClass","_timeout","timeout","_throwOnTimeout","throwOnTimeout","_isPaused","_doesIntervalAllowAnother","_doesConcurrentAllowAnother","_concurrency","_next","_tryToStartAnother","_resolvePromises","_onResumeInterval","_onInterval","_initializeIntervalIfNeeded","_timeoutId","_isIntervalPaused","now","Date","_intervalId","delay","setTimeout","size","clearInterval","canInitializeInterval","emit","dequeue","setInterval","_processQueue","newConcurrency","add","fn","Promise","resolve","reject","run","operation","throwOnTimout","error","enqueue","addAll","functions","all","map","function_","start","pause","clear","onEmpty","existingResolve","onIdle","pending","isPaused","milliseconds"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst EventEmitter = require(\"eventemitter3\");\nconst p_timeout_1 = require(\"p-timeout\");\nconst priority_queue_1 = require(\"./priority-queue\");\nconst empty = () => { };\nconst timeoutError = new p_timeout_1.default.TimeoutError();\n/**\nPromise queue with concurrency control.\n*/\nclass PQueue extends EventEmitter {\n    constructor(options) {\n        super();\n        this._intervalCount = 0;\n        this._intervalEnd = 0;\n        this._pendingCount = 0;\n        this._resolveEmpty = empty;\n        this._resolveIdle = empty;\n        // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion\n        options = Object.assign({ carryoverConcurrencyCount: false, intervalCap: Infinity, interval: 0, concurrency: Infinity, autoStart: true, queueClass: priority_queue_1.default }, options);\n        if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {\n            throw new TypeError(`Expected \\`intervalCap\\` to be a number from 1 and up, got \\`${options.intervalCap}\\` (${typeof options.intervalCap})`);\n        }\n        if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {\n            throw new TypeError(`Expected \\`interval\\` to be a finite number >= 0, got \\`${options.interval}\\` (${typeof options.interval})`);\n        }\n        this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;\n        this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;\n        this._intervalCap = options.intervalCap;\n        this._interval = options.interval;\n        this._queue = new options.queueClass();\n        this._queueClass = options.queueClass;\n        this.concurrency = options.concurrency;\n        this._timeout = options.timeout;\n        this._throwOnTimeout = options.throwOnTimeout === true;\n        this._isPaused = options.autoStart === false;\n    }\n    get _doesIntervalAllowAnother() {\n        return this._isIntervalIgnored || this._intervalCount < this._intervalCap;\n    }\n    get _doesConcurrentAllowAnother() {\n        return this._pendingCount < this._concurrency;\n    }\n    _next() {\n        this._pendingCount--;\n        this._tryToStartAnother();\n    }\n    _resolvePromises() {\n        this._resolveEmpty();\n        this._resolveEmpty = empty;\n        if (this._pendingCount === 0) {\n            this._resolveIdle();\n            this._resolveIdle = empty;\n        }\n    }\n    _onResumeInterval() {\n        this._onInterval();\n        this._initializeIntervalIfNeeded();\n        this._timeoutId = undefined;\n    }\n    _isIntervalPaused() {\n        const now = Date.now();\n        if (this._intervalId === undefined) {\n            const delay = this._intervalEnd - now;\n            if (delay < 0) {\n                // Act as the interval was done\n                // We don't need to resume it here because it will be resumed on line 160\n                this._intervalCount = (this._carryoverConcurrencyCount) ? this._pendingCount : 0;\n            }\n            else {\n                // Act as the interval is pending\n                if (this._timeoutId === undefined) {\n                    this._timeoutId = setTimeout(() => {\n                        this._onResumeInterval();\n                    }, delay);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    _tryToStartAnother() {\n        if (this._queue.size === 0) {\n            // We can clear the interval (\"pause\")\n            // Because we can redo it later (\"resume\")\n            if (this._intervalId) {\n                clearInterval(this._intervalId);\n            }\n            this._intervalId = undefined;\n            this._resolvePromises();\n            return false;\n        }\n        if (!this._isPaused) {\n            const canInitializeInterval = !this._isIntervalPaused();\n            if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {\n                this.emit('active');\n                this._queue.dequeue()();\n                if (canInitializeInterval) {\n                    this._initializeIntervalIfNeeded();\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    _initializeIntervalIfNeeded() {\n        if (this._isIntervalIgnored || this._intervalId !== undefined) {\n            return;\n        }\n        this._intervalId = setInterval(() => {\n            this._onInterval();\n        }, this._interval);\n        this._intervalEnd = Date.now() + this._interval;\n    }\n    _onInterval() {\n        if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {\n            clearInterval(this._intervalId);\n            this._intervalId = undefined;\n        }\n        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;\n        this._processQueue();\n    }\n    /**\n    Executes all queued functions until it reaches the limit.\n    */\n    _processQueue() {\n        // eslint-disable-next-line no-empty\n        while (this._tryToStartAnother()) { }\n    }\n    get concurrency() {\n        return this._concurrency;\n    }\n    set concurrency(newConcurrency) {\n        if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {\n            throw new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${newConcurrency}\\` (${typeof newConcurrency})`);\n        }\n        this._concurrency = newConcurrency;\n        this._processQueue();\n    }\n    /**\n    Adds a sync or async task to the queue. Always returns a promise.\n    */\n    async add(fn, options = {}) {\n        return new Promise((resolve, reject) => {\n            const run = async () => {\n                this._pendingCount++;\n                this._intervalCount++;\n                try {\n                    const operation = (this._timeout === undefined && options.timeout === undefined) ? fn() : p_timeout_1.default(Promise.resolve(fn()), (options.timeout === undefined ? this._timeout : options.timeout), () => {\n                        if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimout) {\n                            reject(timeoutError);\n                        }\n                        return undefined;\n                    });\n                    resolve(await operation);\n                }\n                catch (error) {\n                    reject(error);\n                }\n                this._next();\n            };\n            this._queue.enqueue(run, options);\n            this._tryToStartAnother();\n        });\n    }\n    /**\n    Same as `.add()`, but accepts an array of sync or async functions.\n\n    @returns A promise that resolves when all functions are resolved.\n    */\n    async addAll(functions, options) {\n        return Promise.all(functions.map(async (function_) => this.add(function_, options)));\n    }\n    /**\n    Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)\n    */\n    start() {\n        if (!this._isPaused) {\n            return this;\n        }\n        this._isPaused = false;\n        this._processQueue();\n        return this;\n    }\n    /**\n    Put queue execution on hold.\n    */\n    pause() {\n        this._isPaused = true;\n    }\n    /**\n    Clear the queue.\n    */\n    clear() {\n        this._queue = new this._queueClass();\n    }\n    /**\n    Can be called multiple times. Useful if you for example add additional items at a later time.\n\n    @returns A promise that settles when the queue becomes empty.\n    */\n    async onEmpty() {\n        // Instantly resolve if the queue is empty\n        if (this._queue.size === 0) {\n            return;\n        }\n        return new Promise(resolve => {\n            const existingResolve = this._resolveEmpty;\n            this._resolveEmpty = () => {\n                existingResolve();\n                resolve();\n            };\n        });\n    }\n    /**\n    The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.\n\n    @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.\n    */\n    async onIdle() {\n        // Instantly resolve if none pending and if nothing else is queued\n        if (this._pendingCount === 0 && this._queue.size === 0) {\n            return;\n        }\n        return new Promise(resolve => {\n            const existingResolve = this._resolveIdle;\n            this._resolveIdle = () => {\n                existingResolve();\n                resolve();\n            };\n        });\n    }\n    /**\n    Size of the queue.\n    */\n    get size() {\n        return this._queue.size;\n    }\n    /**\n    Number of pending promises.\n    */\n    get pending() {\n        return this._pendingCount;\n    }\n    /**\n    Whether the queue is currently paused.\n    */\n    get isPaused() {\n        return this._isPaused;\n    }\n    /**\n    Set the timeout for future operations.\n    */\n    set timeout(milliseconds) {\n        this._timeout = milliseconds;\n    }\n    get timeout() {\n        return this._timeout;\n    }\n}\nexports.default = PQueue;\n"]},"metadata":{},"sourceType":"script"}