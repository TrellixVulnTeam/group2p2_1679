{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../core/auth/services/auth.service\";\nexport class ApiService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.user_id = JSON.parse(localStorage.getItem(\"user\")).id;\n    this.token = this.authService.getToken();\n    this.url = \"https://api.jikan.moe/v3/anime/\";\n  }\n\n  setAnimeId(name) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield (yield fetch(\"https://api.jikan.moe/v3/search/anime?q=\" + name + \"&page=1?page=1&limit=1\")).json();\n      _this.anime_id = response.results[0].mal_id;\n    })();\n  } // async addUserAnime(name: string){\n  //   await this.setAnimeId(name)\n  //   let userAnime: any = {\n  //     \"user\":{\"id\":61},\n  //     \"anime\":{\"id\":225}\n  //   } \n  //   console.log(JSON.stringify(userAnime))\n  //   fetch(\"http://localhost:8090/anilib/library\", {\n  //     method: 'POST',\n  //     body: userAnime,\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       Authorization: this.token\n  //     }\n  //   })\n  //   .then(response => response.json())\n  //   .then(data => {\n  //     console.log('Success', data)\n  //   })\n  //   .catch((error) =>{\n  //     console.error('Unable to post userAnime', error)\n  //   })\n  // }\n\n\n  addUserAnime(name) {\n    let userAnime = {\n      \"user\": {\n        \"id\": 61\n      },\n      \"anime\": {\n        \"id\": 225\n      }\n    };\n    this.http.post(\"http://localhost:8090/anilib/library\", JSON.stringify(userAnime)).subscribe(res => {\n      console.log(res);\n    });\n  }\n\n}\n\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\n\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/FrontEnd/src/app/shared/api.service.ts"],"names":["i0","i1","i2","ApiService","constructor","http","authService","user_id","JSON","parse","localStorage","getItem","id","token","getToken","url","setAnimeId","name","response","fetch","json","anime_id","results","mal_id","addUserAnime","userAnime","post","stringify","subscribe","res","console","log","ɵfac","ApiService_Factory","t","ɵɵinject","HttpClient","AuthService","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,oCAApB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoB;AAC3B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,OAAL,GAAeC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC,EAAxD;AACA,SAAKC,KAAL,GAAa,KAAKP,WAAL,CAAiBQ,QAAjB,EAAb;AACA,SAAKC,GAAL,GAAW,iCAAX;AACH;;AACKC,EAAAA,UAAU,CAACC,IAAD,EAAO;AAAA;;AAAA;AACnB,YAAMC,QAAQ,SAAS,OAAOC,KAAK,CAAC,6CAA6CF,IAA7C,GAAoD,wBAArD,CAAZ,EAA4FG,IAA5F,EAAvB;AACA,MAAA,KAAI,CAACC,QAAL,GAAgBH,QAAQ,CAACI,OAAT,CAAiB,CAAjB,EAAoBC,MAApC;AAFmB;AAGtB,GAXmB,CAYpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,YAAY,CAACP,IAAD,EAAO;AACf,QAAIQ,SAAS,GAAG;AACZ,cAAQ;AAAE,cAAM;AAAR,OADI;AAEZ,eAAS;AAAE,cAAM;AAAR;AAFG,KAAhB;AAIA,SAAKpB,IAAL,CAAUqB,IAAV,CAAe,sCAAf,EAAuDlB,IAAI,CAACmB,SAAL,CAAeF,SAAf,CAAvD,EACKG,SADL,CACeC,GAAG,IAAI;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAHD;AAIH;;AA5CmB;;AA8CxB1B,UAAU,CAAC6B,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAI/B,UAAV,EAAsBH,EAAE,CAACmC,QAAH,CAAYlC,EAAE,CAACmC,UAAf,CAAtB,EAAkDpC,EAAE,CAACmC,QAAH,CAAYjC,EAAE,CAACmC,WAAf,CAAlD,CAAP;AAAwF,CAA3I;;AACAlC,UAAU,CAACmC,KAAX,GAAmB,aAActC,EAAE,CAACuC,kBAAH,CAAsB;AAAE1B,EAAAA,KAAK,EAAEV,UAAT;AAAqBqC,EAAAA,OAAO,EAAErC,UAAU,CAAC6B,IAAzC;AAA+CS,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../core/auth/services/auth.service\";\r\nexport class ApiService {\r\n    constructor(http, authService) {\r\n        this.http = http;\r\n        this.authService = authService;\r\n        this.user_id = JSON.parse(localStorage.getItem(\"user\")).id;\r\n        this.token = this.authService.getToken();\r\n        this.url = \"https://api.jikan.moe/v3/anime/\";\r\n    }\r\n    async setAnimeId(name) {\r\n        const response = await (await fetch(\"https://api.jikan.moe/v3/search/anime?q=\" + name + \"&page=1?page=1&limit=1\")).json();\r\n        this.anime_id = response.results[0].mal_id;\r\n    }\r\n    // async addUserAnime(name: string){\r\n    //   await this.setAnimeId(name)\r\n    //   let userAnime: any = {\r\n    //     \"user\":{\"id\":61},\r\n    //     \"anime\":{\"id\":225}\r\n    //   } \r\n    //   console.log(JSON.stringify(userAnime))\r\n    //   fetch(\"http://localhost:8090/anilib/library\", {\r\n    //     method: 'POST',\r\n    //     body: userAnime,\r\n    //     headers: {\r\n    //       'Content-Type': 'application/json',\r\n    //       Authorization: this.token\r\n    //     }\r\n    //   })\r\n    //   .then(response => response.json())\r\n    //   .then(data => {\r\n    //     console.log('Success', data)\r\n    //   })\r\n    //   .catch((error) =>{\r\n    //     console.error('Unable to post userAnime', error)\r\n    //   })\r\n    // }\r\n    addUserAnime(name) {\r\n        let userAnime = {\r\n            \"user\": { \"id\": 61 },\r\n            \"anime\": { \"id\": 225 }\r\n        };\r\n        this.http.post(\"http://localhost:8090/anilib/library\", JSON.stringify(userAnime))\r\n            .subscribe(res => {\r\n            console.log(res);\r\n        });\r\n    }\r\n}\r\nApiService.ɵfac = function ApiService_Factory(t) { return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService)); };\r\nApiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ApiService, factory: ApiService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}