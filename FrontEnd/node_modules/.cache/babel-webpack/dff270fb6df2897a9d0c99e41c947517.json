{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // Imports\n\nconst ow_1 = __importDefault(require(\"ow\")); // Utils\n\n\nconst utils_1 = require(\"./utils\");\n/**\n * Fetches the specified user animelist\n *\n * @param username - Username on MyAnimeList\n * @param type - The type to search for\n * @param page - The page number\n */\n\n\nconst animeList = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (username, type = 'all', page = 1) {\n    ow_1.default(page, ow_1.default.number.positive);\n    const {\n      body\n    } = yield utils_1.queue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n      return utils_1.realTimeapi(`/user/${username}/animelist/${type}/${page}`, {});\n    }));\n    return body;\n  });\n\n  return function animeList(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Fetches the specified user friends\n *\n * @param username - Username on MyAnimeList\n * @param page - The page number\n */\n\n\nconst friends = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (username, page = 1) {\n    ow_1.default(page, ow_1.default.number.positive);\n    const {\n      body\n    } = yield utils_1.queue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n      return utils_1.realTimeapi(`/user/${username}/friends/${page}`, {});\n    }));\n    return body;\n  });\n\n  return function friends(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n/**\n * Fetches the specified user history\n *\n * @param username - Username on MyAnimeList\n * @param type - Anime, Manga or Both\n */\n\n\nconst history = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(function* (username, type = 'both') {\n    if (type === 'anime') {\n      const anime = yield utils_1.queue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n        return utils_1.realTimeapi(`/user/${username}/history/anime`, {});\n      }));\n      return anime.body;\n    }\n\n    if (type === 'both') {\n      const both = yield utils_1.queue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n        return utils_1.realTimeapi(`/user/${username}/history`, {});\n      }));\n      return both.body;\n    }\n\n    if (type === 'manga') {\n      const manga = yield utils_1.queue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n        return utils_1.realTimeapi(`/user/${username}/history/manga`, {});\n      }));\n      return manga.body;\n    }\n\n    throw new Error('Invalid type.');\n  });\n\n  return function history(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n/**\n * Fetches the specified user mangalist\n *\n * @param username - Username on MyAnimeList\n * @param type - The type to search for\n * @param page - The page number\n */\n\n\nconst mangaList = /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator(function* (username, type = 'all', page = 1) {\n    ow_1.default(page, ow_1.default.number.positive);\n    const {\n      body\n    } = yield utils_1.queue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n      return utils_1.realTimeapi(`/user/${username}/mangalist/${type}/${page}`, {});\n    }));\n    return body;\n  });\n\n  return function mangaList(_x4) {\n    return _ref9.apply(this, arguments);\n  };\n}();\n/**\n * Fetches the specified user profile\n *\n * @param username - Username on MyAnimeList\n */\n\n\nconst profile = /*#__PURE__*/function () {\n  var _ref11 = _asyncToGenerator(function* (username) {\n    const {\n      body\n    } = yield utils_1.queue.add( /*#__PURE__*/_asyncToGenerator(function* () {\n      return utils_1.realTimeapi(`/user/${username}`, {});\n    }));\n    return body;\n  });\n\n  return function profile(_x5) {\n    return _ref11.apply(this, arguments);\n  };\n}();\n\nexports.default = {\n  animeList,\n  friends,\n  history,\n  mangaList,\n  profile\n};","map":{"version":3,"sources":["C:/Users/18048/Documents/Revature/Projects/Project 2/group2p2/frontend/node_modules/jikan-client/dist/user.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","ow_1","require","utils_1","animeList","username","type","page","default","number","positive","body","queue","add","realTimeapi","friends","history","anime","both","manga","Error","mangaList","profile"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Imports\nconst ow_1 = __importDefault(require(\"ow\"));\n// Utils\nconst utils_1 = require(\"./utils\");\n/**\n * Fetches the specified user animelist\n *\n * @param username - Username on MyAnimeList\n * @param type - The type to search for\n * @param page - The page number\n */\nconst animeList = async (username, type = 'all', page = 1) => {\n    ow_1.default(page, ow_1.default.number.positive);\n    const { body } = await utils_1.queue.add(async () => utils_1.realTimeapi(`/user/${username}/animelist/${type}/${page}`, {}));\n    return body;\n};\n/**\n * Fetches the specified user friends\n *\n * @param username - Username on MyAnimeList\n * @param page - The page number\n */\nconst friends = async (username, page = 1) => {\n    ow_1.default(page, ow_1.default.number.positive);\n    const { body } = await utils_1.queue.add(async () => utils_1.realTimeapi(`/user/${username}/friends/${page}`, {}));\n    return body;\n};\n/**\n * Fetches the specified user history\n *\n * @param username - Username on MyAnimeList\n * @param type - Anime, Manga or Both\n */\nconst history = async (username, type = 'both') => {\n    if (type === 'anime') {\n        const anime = await utils_1.queue.add(async () => utils_1.realTimeapi(`/user/${username}/history/anime`, {}));\n        return anime.body;\n    }\n    if (type === 'both') {\n        const both = await utils_1.queue.add(async () => utils_1.realTimeapi(`/user/${username}/history`, {}));\n        return both.body;\n    }\n    if (type === 'manga') {\n        const manga = await utils_1.queue.add(async () => utils_1.realTimeapi(`/user/${username}/history/manga`, {}));\n        return manga.body;\n    }\n    throw new Error('Invalid type.');\n};\n/**\n * Fetches the specified user mangalist\n *\n * @param username - Username on MyAnimeList\n * @param type - The type to search for\n * @param page - The page number\n */\nconst mangaList = async (username, type = 'all', page = 1) => {\n    ow_1.default(page, ow_1.default.number.positive);\n    const { body } = await utils_1.queue.add(async () => utils_1.realTimeapi(`/user/${username}/mangalist/${type}/${page}`, {}));\n    return body;\n};\n/**\n * Fetches the specified user profile\n *\n * @param username - Username on MyAnimeList\n */\nconst profile = async (username) => {\n    const { body } = await utils_1.queue.add(async () => utils_1.realTimeapi(`/user/${username}`, {}));\n    return body;\n};\nexports.default = {\n    animeList,\n    friends,\n    history,\n    mangaList,\n    profile\n};\n"]},"metadata":{},"sourceType":"script"}